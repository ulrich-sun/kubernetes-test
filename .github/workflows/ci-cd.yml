name: CI/CD pipeline

on:
  push:
    branches: [main]
env:
    CONFIG_DIRECTORY: "spring-boot-app"
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Vous pouvez choisir 'zulu' ou une autre distribution si nÃ©cessaire
          java-version: 11

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
        
      - name: Show current directory
        run: pwd
        working-directory: ${{ env.CONFIG_DIRECTORY }}
      - name: List files in the current directory
        run: ls -la
        working-directory: ${{ env.CONFIG_DIRECTORY }}
    #   - name: Change directory to project root
    #     run: cd spring-boot-app #

      - name: Install Maven dependencies
        run: mvn install
        working-directory: ${{ env.CONFIG_DIRECTORY }}
      - name: Run unit tests
        id: run_unit_tests
        run: mvn test
        working-directory: ${{ env.CONFIG_DIRECTORY }}
      - name: Generate code coverage report
        run: mvn jacoco:report
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      - name: SonarQube analysis
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONARQUBE_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONARQUBE_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONARQUBE_SERVER_URL }}
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success()

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker buildx build --push --tag my-image:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    env:
      ARGOCD_SERVER_URL: ${{ secrets.ARGOCD_SERVER_URL }}
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

    steps:
      - name: Wait for ArgoCD server to be ready
        run: |
          until curl -s http://${{ env.ARGOCD_SERVER_URL }}/api/v1/health; do echo "Waiting for ArgoCD server..."; sleep 10; done

      - name: Apply application manifest to ArgoCD
        run: |
          argocd app sync my-application --grpc-web

      - name: Monitor ArgoCD deployment status
        run: |
          while true; do echo "Waiting for ArgoCD deployment..."; sleep 30; argocd app wait my-application --grpc-web; done

  send-notification:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()

    steps:
      - name: Check if build or tests failed
        id: check-failure
        run: |
          if [ "${{ needs.build-and-test.result }}" == "failure" ] || [ "${{ steps.run_unit_tests.outcome }}" != "success" ]; then
            echo "send_notification=true" >> $GITHUB_ENV
          else
            echo "send_notification=false" >> $GITHUB_ENV
          fi

      - name: Send email notification
        if: env.send_notification == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'CI/CD Pipeline Failed'
          body: 'The CI/CD pipeline has failed. Please check the logs for more details.'
          to: ulrichnoumsi98@gmail.com
          from: ulrichnoumsi98@gmail.com
